function [y1] = myNeuralNetworkFunction4(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 05-Jul-2022 21:12:13.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = -40;
x1_step1.gain = 0.0333333333333333;
x1_step1.ymin = -1;

% Layer 1
b1 = [5.5793507756986464585;-0.34360316610764118916;0.51944654505889853446;1.1164417178879708636];
IW1_1 = [-5.199246321659705572;-2.6715610914927983011;2.7949832275806572035;2.0267590299106514884];

% Layer 2
b2 = 0.049382449460171951028;
LW2_1 = [-0.00082242763702286244328 -1.1377665132600225384 -1.899140083108703303 -0.28818744715487421004];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 4.23066136842531;
y1_step1.xoffset = 8.43536485831131e-05;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
