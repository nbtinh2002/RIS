function [y1] = BER_NN2(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 05-Jul-2022 13:55:30.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 31622776.6016838;
x1_step1.gain = 9.71345313258863e-05;
x1_step1.ymin = -1;

% Layer 1
b1 = [-14;-10.888888888888889284;7.7777777777777785673;4.6666666666666660745;1.5555555555555553582;-1.5555555555555553582;4.6666666666666660745;7.7777777777777785673;-10.888888888888889284;14];
IW1_1 = [14.000000000000003553;14.000000000000003553;-14.000000000000003553;-14.000000000000003553;-14.000000000000003553;-14.000000000000003553;14.000000000000003553;14.000000000000003553;-14.000000000000003553;14.000000000000003553];

% Layer 2
b2 = 0.57828771959057423402;
LW2_1 = [0.34551376903800212759 0.046272373738348582251 -0.86064978847778506044 -0.86641935113764123599 0.10256512225114833292 -0.9886089751161541983 0.21372114526483265706 0.88790334131870252143 -0.14549762062455662281 0.47785991368431379733];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 128741.503553973;
y1_step1.xoffset = 0.451810989316032;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
